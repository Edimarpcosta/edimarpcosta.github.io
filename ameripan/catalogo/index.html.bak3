<!DOCTYPE html>
<html lang="pt-BR" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catálogo de Produtos - Ameripan</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            /* Variáveis para o modo claro (padrão) */
            --bg-primary: #f8f9fa;
            --bg-secondary: #ffffff;
            --primary-color: #3498db;
            --secondary-color: #2980b9;
            --text-color: #333333;
            --text-secondary: #777777;
            --border-color: #dddddd;
            --hover-color: rgba(0, 0, 0, 0.05);
            --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            --header-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            --modal-overlay: rgba(0, 0, 0, 0.8);
        }

        [data-theme="dark"] {
            /* Variáveis para o modo escuro */
            --bg-primary: #1a1a1a;
            --bg-secondary: #2d2d2d;
            --primary-color: #2196f3;
            --secondary-color: #1976d2;
            --text-color: #f0f0f0;
            --text-secondary: #bbbbbb;
            --border-color: #444444;
            --hover-color: rgba(255, 255, 255, 0.05);
            --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            --header-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            --modal-overlay: rgba(0, 0, 0, 0.9);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            transition: background-color 0.3s, color 0.3s;
        }

        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container { 
            max-width: 1400px;
            margin: auto;
            padding: 0 15px;
        }

        header {
            background-color: var(--primary-color);
            color: white;
            padding: 20px 0;
            margin-bottom: 20px;
            box-shadow: var(--header-shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        h1 {
            text-align: center;
            font-size: 2.2rem;
            font-weight: 600;
            margin: 0;
        }

        .header-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
        }

        .theme-toggle {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 20px;
            background-color: rgba(255, 255, 255, 0.2);
            transition: background-color 0.3s;
        }

        .theme-toggle:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }

        .theme-toggle i {
            margin-right: 5px;
        }

        .cart-indicator {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 20px;
            background-color: rgba(255, 255, 255, 0.2);
            transition: background-color 0.3s;
        }

        .cart-indicator:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }

        .cart-count {
            margin-left: 5px;
            background-color: white;
            color: var(--primary-color);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .filters { 
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 25px;
            padding: 15px;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            align-items: center;
        }

        .filters-main {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            flex: 1;
            min-width: 200px;
        }

        .search-container {
            position: relative;
            flex: 1;
            min-width: 200px;
        }

        #search {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border: 1px solid var(--border-color);
            border-radius: 50px;
            font-size: 1rem;
            background-color: var(--bg-secondary);
            color: var(--text-color);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
        }

        .select-container {
            position: relative;
            min-width: 150px;
        }

        select {
            padding: 10px 15px;
            border: 1px solid var(--border-color);
            border-radius: 50px;
            background-color: var(--bg-secondary);
            color: var(--text-color);
            font-size: 1rem;
            width: 100%;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            cursor: pointer;
        }

        .select-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
            pointer-events: none;
        }

        .filters-advanced {
            display: none;
            flex-wrap: wrap;
            gap: 15px;
            width: 100%;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid var(--border-color);
        }

        .filters-toggle {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            border-radius: 50px;
            background-color: var(--primary-color);
            color: white;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .filters-toggle i {
            margin-left: 5px;
            transition: transform 0.3s;
        }

        .filters-toggle.active i {
            transform: rotate(180deg);
        }

        .category-section { 
            margin-bottom: 40px;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            box-shadow: var(--card-shadow);
        }

        .category-title { 
            font-size: 1.5em;
            margin-bottom: 20px;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 10px;
            color: var(--secondary-color);
            text-transform: capitalize;
        }

        .products { 
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 20px;
        }

        .product { 
            display: flex;
            flex-direction: column;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s, box-shadow 0.3s;
            box-shadow: var(--card-shadow);
            border: 1px solid var(--border-color);
            position: relative;
        }

        .product:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .product-img-container {
            height: 180px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--bg-secondary);
            position: relative;
        }

        .product img { 
            max-width: 90%;
            max-height: 90%;
            object-fit: contain;
            transition: transform 0.3s;
        }

        .product-actions {
            display: flex;
            position: absolute;
            top: 10px;
            right: 10px;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .product:hover .product-actions {
            opacity: 1;
        }

        .product-action-btn {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .product-action-btn:hover {
            background-color: var(--primary-color);
        }

        .product-img-container:hover img {
            transform: scale(1.05);
        }

        .product-info {
            padding: 15px;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .product-sku {
            display: inline-block;
            padding: 3px 8px;
            background-color: rgba(52, 152, 219, 0.1);
            color: var(--primary-color);
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-bottom: 8px;
            align-self: flex-start;
        }

        .product-name {
            font-size: 0.95rem;
            margin-bottom: 5px;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            flex-grow: 1;
        }

        .product-category {
            font-size: 0.8rem;
            color: var(--text-secondary);
            text-transform: capitalize;
        }

        .product-package {
            font-size: 0.8rem;
            color: var(--primary-color);
            margin-top: 5px;
        }

        .product-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
            border-top: 1px solid var(--border-color);
            padding-top: 10px;
        }

        .quantity-control {
            display: flex;
            align-items: center;
        }

        .qty-btn {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            border: 1px solid var(--border-color);
            background-color: var(--bg-secondary);
            color: var(--text-color);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .qty-btn:hover {
            background-color: var(--primary-color);
            color: white;
        }

        .qty-input {
            width: 40px;
            text-align: center;
            border: none;
            background: transparent;
            color: var(--text-color);
            font-weight: bold;
        }

        .add-to-cart {
            padding: 6px 12px;
            border-radius: 50px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 0.85rem;
        }

        .add-to-cart:hover {
            background-color: var(--secondary-color);
        }

        .add-to-cart.in-cart {
            background-color: #27ae60;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: var(--modal-overlay);
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s;
            overflow-y: auto;
        }

        .modal.active {
            opacity: 1;
        }

        .modal-content {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 90%;
            max-height: 90%;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
            margin: 20px;
            width: 800px;
        }

        .modal-header {
            width: 100%;
            padding: 15px 20px;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .modal-close {
            font-size: 24px;
            cursor: pointer;
        }

        .modal-body {
            width: 100%;
            padding: 20px;
            overflow-y: auto;
            max-height: 70vh;
        }

        .image-modal-content {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .image-modal-img {
            max-width: 100%;
            max-height: 60vh;
            object-fit: contain;
            margin-bottom: 20px;
        }

        .image-modal-info {
            width: 100%;
            text-align: center;
        }

        .cart-modal-content {
            width: 100%;
        }

        .cart-items {
            margin-bottom: 20px;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .cart-item-info {
            flex: 1;
        }

        .cart-item-name {
            font-weight: 600;
        }

        .cart-item-sku {
            font-size: 0.8rem;
            color: var(--text-secondary);
        }

        .cart-item-qty {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .cart-actions {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .cart-action-btn {
            padding: 10px 20px;
            border-radius: 4px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 5px;
        }

        .cart-action-btn.whatsapp {
            background-color: #25D366;
        }

        .cart-action-btn.clear {
            background-color: #e74c3c;
        }

        .cart-action-btn:hover {
            opacity: 0.9;
        }

        .product-info-modal-content {
            display: flex;
            flex-direction: column;
            width: 100%;
        }

        .product-info-header {
            display: flex;
            margin-bottom: 20px;
        }

        .product-info-img {
            width: 100px;
            height: 100px;
            object-fit: contain;
            margin-right: 20px;
        }

        .product-info-title {
            flex: 1;
        }

        .product-info-sku {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-bottom: 5px;
        }

        .product-info-name {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .product-info-category {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        .product-info-details {
            border-top: 1px solid var(--border-color);
            padding-top: 20px;
        }

        .product-info-tab {
            margin-bottom: 20px;
        }

        .product-info-tab-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        .product-info-fetching {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: var(--primary-color);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loader {
            display: none;
            text-align: center;
            padding: 30px 0;
        }

        .loader-spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
        }

        .no-products {
            text-align: center;
            padding: 50px;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            font-size: 1.2rem;
            color: var(--text-secondary);
        }

        footer {
            background-color: var(--primary-color);
            color: white;
            text-align: center;
            padding: 20px 0;
            margin-top: 50px;
        }

        .back-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            z-index: 100;
        }

        .back-to-top.visible {
            opacity: 1;
            visibility: visible;
        }

        .back-to-top:hover {
            background-color: var(--secondary-color);
        }

        .empty-cart-message {
            text-align: center;
            padding: 20px;
            color: var(--text-secondary);
        }

        /* Responsividade para dispositivos móveis */
        @media (max-width: 768px) {
            .filters, .filters-main {
                flex-direction: column;
                align-items: stretch;
            }
            
            .products {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
            
            .product-img-container {
                height: 150px;
            }

            .product-actions {
                opacity: 1;
                position: absolute;
                top: 5px;
                right: 5px;
            }
            
            .modal-content {
                width: 95%;
                max-height: 95vh;
            }
            
            .product-info-header {
                flex-direction: column;
                align-items: center;
                text-align: center;
            }
            
            .product-info-img {
                margin-right: 0;
                margin-bottom: 15px;
            }
            
            .cart-item {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .cart-item-qty {
                margin-top: 10px;
            }
        }

        @media (max-width: 576px) {
            .header-controls {
                flex-direction: column;
                gap: 10px;
            }
            
            .products {
                grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
            }
            
            .product-img-container {
                height: 130px;
            }
            
            .cart-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Catálogo de Produtos</h1>
            <div class="header-controls">
                <div class="theme-toggle" onclick="toggleTheme()">
                    <i class="fas fa-moon"></i>
                    <span>Modo Escuro</span>
                </div>
                <div class="cart-indicator" onclick="openCartModal()">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Carrinho</span>
                    <div class="cart-count">0</div>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="filters">
            <div class="filters-main">
                <div class="search-container">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" id="search" placeholder="Buscar por nome ou SKU">
                </div>
                <div class="select-container">
                    <select id="category">
                        <option value="">Todas as Categorias</option>
                    </select>
                    <i class="fas fa-chevron-down select-icon"></i>
                </div>
                <div class="select-container">
                    <select id="sort">
                        <option value="">Ordenação Padrão</option>
                        <option value="asc">Nome: A-Z</option>
                        <option value="desc">Nome: Z-A</option>
                    </select>
                    <i class="fas fa-chevron-down select-icon"></i>
                </div>
                <div class="filters-toggle" onclick="toggleAdvancedFilters()">
                    Filtros Avançados <i class="fas fa-chevron-down"></i>
                </div>
            </div>
            <div class="filters-advanced" id="advanced-filters">
                <div class="select-container">
                    <select id="package-size">
                        <option value="">Todos os Tamanhos</option>
                        <option value="500g">500g</option>
                        <option value="1kg">1kg</option>
                        <option value="4kg">4kg</option>
                        <option value="10kg">10kg</option>
                        <option value="12kg">12kg</option>
                        <option value="20kg">20kg</option>
                        <option value="25kg">25kg</option>
                    </select>
                    <i class="fas fa-chevron-down select-icon"></i>
                </div>
            </div>
        </div>
        
        <div class="loader" id="initial-loader">
            <div class="loader-spinner"></div>
            <p>Carregando produtos...</p>
        </div>
        
        <div id="product-list"></div>
    </div>

    <!-- Modal para Imagem Ampliada -->
    <div id="imageModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Visualização do Produto</div>
                <div class="modal-close" onclick="closeModal('imageModal')">&times;</div>
            </div>
            <div class="modal-body">
                <div class="image-modal-content">
                    <img class="image-modal-img" id="modalImg" src="" alt="Imagem Ampliada">
                    <div class="image-modal-info" id="modalProductInfo"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Carrinho -->
    <div id="cartModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Carrinho de Produtos</div>
                <div class="modal-close" onclick="closeModal('cartModal')">&times;</div>
            </div>
            <div class="modal-body">
                <div class="cart-modal-content">
                    <div class="cart-items" id="cart-items">
                        <!-- Itens do carrinho serão adicionados aqui -->
                    </div>
                    <div class="cart-actions">
                        <button class="cart-action-btn whatsapp" onclick="sendToWhatsApp()">
                            <i class="fab fa-whatsapp"></i> Enviar para WhatsApp
                        </button>
                        <button class="cart-action-btn clear" onclick="clearCart()">
                            <i class="fas fa-trash"></i> Limpar Carrinho
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Informações do Produto -->
    <div id="productInfoModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Informações do Produto</div>
                <div class="modal-close" onclick="closeModal('productInfoModal')">&times;</div>
            </div>
            <div class="modal-body">
                <div class="product-info-modal-content" id="product-info-content">
                    <!-- Conteúdo de informações será adicionado aqui -->
                </div>
            </div>
        </div>
    </div>

    <div class="back-to-top" id="backToTop" onclick="scrollToTop()">
        <i class="fas fa-arrow-up"></i>
    </div>

    <footer>
        <div class="container">
            <p>&copy; 2025 Catálogo de Produtos Ameripan</p>
        </div>
    </footer>

    <script>
        // Variáveis globais
        let productData = [];
        let allProducts = [];
        let visibleProducts = 20;
        const incrementAmount = 15;
        let isLoading = false;
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        
        // Mostrar loader inicial
        document.getElementById('initial-loader').style.display = 'block';

        // Inicializar a página
        document.addEventListener('DOMContentLoaded', () => {
            fetchCSV();
            updateCartCount();
            setupTheme();
        });

        // Configurar tema (claro/escuro)
        function setupTheme() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            updateThemeToggle(savedTheme);
        }

        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeToggle(newTheme);
        }

        function updateThemeToggle(theme) {
            const themeToggle = document.querySelector('.theme-toggle');
            
            if (theme === 'dark') {
                themeToggle.innerHTML = '<i class="fas fa-sun"></i><span>Modo Claro</span>';
            } else {
                themeToggle.innerHTML = '<i class="fas fa-moon"></i><span>Modo Escuro</span>';
            }
        }

        // Controle de filtros avançados
        function toggleAdvancedFilters() {
            const filtersAdvanced = document.getElementById('advanced-filters');
            const toggleButton = document.querySelector('.filters-toggle');
            
            if (filtersAdvanced.style.display === 'flex') {
                filtersAdvanced.style.display = 'none';
                toggleButton.classList.remove('active');
            } else {
                filtersAdvanced.style.display = 'flex';
                toggleButton.classList.add('active');
            }
        }

        // Buscar dados do CSV
        async function fetchCSV() {
            try {
                const response = await fetch("produtos.csv");
                
                if (!response.ok) {
                    throw new Error(`Erro ao buscar CSV: ${response.status}`);
                }
                
                const csv = await response.text();
                
                // Análise do CSV
                parseCSV(csv);
            } catch (error) {
                console.error("Erro ao carregar o CSV:", error);
                document.getElementById('initial-loader').style.display = 'none';
                document.getElementById('product-list').innerHTML = '<div class="no-products">Erro ao carregar os produtos. Por favor, tente novamente mais tarde.</div>';
            }
        }

        // Análise do CSV
        function parseCSV(csv) {
            let lines = csv.split('\n');
            
            // Pular o cabeçalho
            if (lines.length > 0) {
                lines = lines.slice(1);
            }
            
            // Array temporário para detectar duplicatas
            const tempProducts = [];
            const processedSkus = new Set();
            
            lines.forEach(line => {
                // Separar corretamente os campos
                let fields = line.split(';');
                if (fields.length < 5) return;
                
                let [rowid, categoria, sku, marca, preco, img] = fields;
                
                // Limpar espaços em branco
                sku = sku ? sku.trim() : "";
                marca = marca ? marca.trim() : "";
                img = img ? img.trim() : "";
                categoria = categoria ? categoria.trim() : "";
                
                // Extrair informação de tamanho da embalagem (se existir)
                let packageSize = extractPackageSize(marca);
                
                // Verificar se já processamos este SKU
                if (sku && !processedSkus.has(sku)) {
                    processedSkus.add(sku);
                    tempProducts.push({ 
                        rowid, 
                        categoria, 
                        sku, 
                        marca, 
                        img, 
                        packageSize 
                    });
                }
            });
            
            allProducts = tempProducts;
            
            // Ordenar produtos por categoria e nome
            allProducts.sort((a, b) => {
                if (a.categoria !== b.categoria) {
                    return a.categoria.localeCompare(b.categoria);
                }
                return a.marca.localeCompare(b.marca);
            });
            
            // Ocultar loader inicial
            document.getElementById('initial-loader').style.display = 'none';
            
            // Popular categorias e exibir produtos
            populateCategories();
            displayProducts();
            
            // Configurar observador para scroll infinito
            setupInfiniteScroll();
        }

        // Extrai informação de tamanho da embalagem
        function extractPackageSize(name) {
            const patterns = [
                /\b500g\b/i,
                /\b1\s*kg\b/i,
                /\b4\s*kg\b/i,
                /\b10\s*kg\b/i,
                /\b12\s*kg\b/i,
                /\b20\s*kg\b/i,
                /\b25\s*kg\b/i
            ];
            
            const sizes = ['500g', '1kg', '4kg', '10kg', '12kg', '20kg', '25kg'];
            
            for (let i = 0; i < patterns.length; i++) {
                if (patterns[i].test(name)) {
                    return sizes[i];
                }
            }
            
            return null;
        }

        // Exibir produtos com filtros aplicados
        function displayProducts(filter = "", category = "", sort = "", packageSize = "") {
            // Filtrar produtos de acordo com critérios
            productData = allProducts.filter(p => {
                // Filtro por texto (nome ou SKU)
                const textMatch = !filter || 
                    p.marca.toLowerCase().includes(filter.toLowerCase()) || 
                    p.sku.toLowerCase().includes(filter.toLowerCase());
                
                // Filtro por categoria
                const categoryMatch = !category || p.categoria === category;
                
                // Filtro por tamanho da embalagem
                const packageMatch = !packageSize || 
                    (p.packageSize && p.packageSize.toLowerCase() === packageSize.toLowerCase());
                
                return textMatch && categoryMatch && packageMatch;
            });
            
            // Aplicar ordenação
            if (sort) {
                productData.sort((a, b) => {
                    if (sort === 'asc') {
                        return a.marca.localeCompare(b.marca);
                    } else if (sort === 'desc') {
                        return b.marca.localeCompare(a.marca);
                    }
                    return 0;
                });
            } else {
                // Ordenação padrão: por categoria depois por nome
                productData.sort((a, b) => {
                    if (a.categoria !== b.categoria) {
                        return a.categoria.localeCompare(b.categoria);
                    }
                    return a.marca.localeCompare(b.marca);
                });
            }
            
            let productList = document.getElementById("product-list");
            productList.innerHTML = "";
            
            if (productData.length === 0) {
                productList.innerHTML = '<div class="no-products">Nenhum produto encontrado com os critérios de busca.</div>';
                return;
            }
            
            // Limitar ao número de produtos visíveis
            const visibleData = productData.slice(0, visibleProducts);
            
            // Agrupar por categoria
            let categories = [...new Set(visibleData.map(p => p.categoria))].sort();
            
            categories.forEach(cat => {
                let categorySection = document.createElement("div");
                categorySection.classList.add("category-section");
                categorySection.innerHTML = `<h2 class="category-title">${cat}</h2>`;
                
                let productContainer = document.createElement("div");
                productContainer.classList.add("products");
                
                visibleData
                    .filter(p => p.categoria === cat)
                    .forEach(p => {
                        // Verificar se o produto está no carrinho
                        const inCart = cart.some(item => item.sku === p.sku);
                        const cartItem = cart.find(item => item.sku === p.sku);
                        const quantity = cartItem ? cartItem.quantity : 0;
                        
                        let productDiv = document.createElement("div");
                        productDiv.classList.add("product");
                        productDiv.setAttribute('data-rowid', p.rowid);
                        productDiv.setAttribute('data-sku', p.sku);
                        
                        const imgHighRes = p.img ? p.img.replace('300x300', '2500x2500') : '';
                        
                        productDiv.innerHTML = `
                            <div class="product-img-container">
                                <img src="${p.img}" alt="${p.marca}" 
                                     onclick="openImageModal('${imgHighRes}', '${p.sku}', '${p.marca.replace(/'/g, "\\'")}')"
                                     onerror="handleImageError(this, '${p.sku}')">
                                <div class="product-actions">
                                    <div class="product-action-btn" onclick="openImageModal('${imgHighRes}', '${p.sku}', '${p.marca.replace(/'/g, "\\'")}')">
                                        <i class="fas fa-search-plus"></i>
                                    </div>
                                    <div class="product-action-btn" onclick="openProductInfoModal('${p.sku}', '${p.marca.replace(/'/g, "\\'")}', '${p.categoria}', '${p.img}')">
                                        <i class="fas fa-info"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="product-info">
                                <span class="product-sku">${p.sku}</span>
                                <h3 class="product-name">${p.marca}</h3>
                                <span class="product-category">${p.categoria}</span>
                                ${p.packageSize ? `<span class="product-package">${p.packageSize}</span>` : ''}
                                <div class="product-controls">
                                    <div class="quantity-control">
                                        <button class="qty-btn" onclick="decrementQuantity('${p.sku}')">-</button>
                                        <input type="number" class="qty-input" id="qty-${p.sku}" value="${quantity}" min="0" max="999" readonly>
                                        <button class="qty-btn" onclick="incrementQuantity('${p.sku}')">+</button>
                                    </div>
                                    <button class="add-to-cart ${inCart ? 'in-cart' : ''}" 
                                            id="cart-btn-${p.sku}" 
                                            onclick="toggleCart('${p.sku}', '${p.marca.replace(/'/g, "\\'")}', '${p.categoria}')">
                                        ${inCart ? '<i class="fas fa-check"></i>' : '<i class="fas fa-cart-plus"></i>'}
                                    </button>
                                </div>
                            </div>
                        `;
                        
                        productContainer.appendChild(productDiv);
                    });
                
                categorySection.appendChild(productContainer);
                productList.appendChild(categorySection);
            });
            
            // Verificar se precisamos mostrar o loader para carregamento infinito
            addInfiniteScrollLoader();
        }

        // Popular seletor de categorias
        function populateCategories() {
            let categories = [...new Set(allProducts.map(p => p.categoria))].sort();
            let categorySelect = document.getElementById("category");
            categorySelect.innerHTML = '<option value="">Todas as Categorias</option>';
            
            categories.forEach(cat => {
                let option = document.createElement("option");
                option.value = cat;
                option.textContent = cat.charAt(0).toUpperCase() + cat.slice(1);
                categorySelect.appendChild(option);
            });
        }

        // Lidar com erros de carregamento de imagem
        async function handleImageError(img, sku) {
            try {
                // Tentar buscar a imagem do produto usando o script pega-imagem
                const productInfo = await getProductInfoFromAmeripan(sku);
                
                if (productInfo && productInfo.imageUrl) {
                    img.src = productInfo.imageUrl;
                } else {
                    // Se não conseguir encontrar, usar uma imagem de placeholder
                    img.src = "https://via.placeholder.com/300x300?text=Produto+Indisponível";
                }
            } catch (error) {
                console.error(`Erro ao buscar imagem para SKU ${sku}:`, error);
                img.src = "https://via.placeholder.com/300x300?text=Produto+Indisponível";
            }
        }

        // Buscar informações do produto na Ameripan (adaptado do pega-imagem.html)
        async function getProductInfoFromAmeripan(sku) {
            try {
                const url = `https://www.ameripan.com.br/buscar?q=${sku}`;
                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`Erro ao buscar produto: ${response.status} ${response.statusText}`);
                }

                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');

                // Procura pela div que contém o SKU
                const productDiv = doc.querySelector(`.listagem-item .produto-sku.hide`);

                if (!productDiv) {
                    console.error(`Produto com SKU ${sku} não encontrado na Ameripan.`);
                    return null;
                }

                // Verifica se o SKU do elemento encontrado é o SKU procurado
                const skuText = productDiv.textContent.trim();
                if (skuText !== sku) {
                    console.error(`SKU procurado (${sku}) difere do SKU encontrado (${skuText}).`);
                    return null;
                }

                // Extração de dados
                const parentDiv = productDiv.closest('.listagem-item');
                const internalId = parentDiv.dataset.id;
                const name = parentDiv.querySelector('.nome-produto').textContent.trim();
                const imgSrc = parentDiv.querySelector('.imagem-produto img').src;

                return { sku, name, internalId, imageUrl: imgSrc };
            } catch (error) {
                console.error("Erro ao obter informações do produto:", error);
                return null;
            }
        }

        // Abrir modal de imagem
        function openImageModal(imgSrc, sku, name) {
            // Se a imagem estiver vazia, tentar buscar da Ameripan
            if (!imgSrc || imgSrc === '') {
                getProductInfoFromAmeripan(sku).then(productInfo => {
                    if (productInfo && productInfo.imageUrl) {
                        document.getElementById("modalImg").src = productInfo.imageUrl;
                    } else {
                        document.getElementById("modalImg").src = "https://via.placeholder.com/500x500?text=Imagem+Indisponível";
                    }
                });
            } else {
                document.getElementById("modalImg").src = imgSrc;
            }
            
            document.getElementById("modalProductInfo").innerHTML = `
                <strong>${sku}</strong><br>
                ${name}
            `;
            
            openModal('imageModal');
        }

        // Abrir modal de informações do produto
        function openProductInfoModal(sku, name, category, imgSrc) {
            const productInfoContent = document.getElementById("product-info-content");
            
            // Exibir informações básicas do produto
            productInfoContent.innerHTML = `
                <div class="product-info-header">
                    <img class="product-info-img" src="${imgSrc}" alt="${name}" onerror="this.src='https://via.placeholder.com/100x100?text=Sem+Imagem'">
                    <div class="product-info-title">
                        <div class="product-info-sku">SKU: ${sku}</div>
                        <div class="product-info-name">${name}</div>
                        <div class="product-info-category">Categoria: ${category}</div>
                    </div>
                </div>
                <div class="product-info-details">
                    <div class="product-info-fetching">
                        <div class="spinner"></div>
                        <span>Buscando informações adicionais...</span>
                    </div>
                </div>
            `;
            
            // Abrir o modal
            openModal('productInfoModal');
            
            // Buscar informações adicionais sobre o produto
            fetchProductInfo(sku, name).then(info => {
                const productInfoDetails = document.querySelector(".product-info-details");
                
                if (!info) {
                    productInfoDetails.innerHTML = `
                        <div class="product-info-tab">
                            <div class="product-info-tab-title">Informações</div>
                            <p>Não foi possível obter informações adicionais para este produto.</p>
                        </div>
                    `;
                    return;
                }
                
                productInfoDetails.innerHTML = `
                    <div class="product-info-tab">
                        <div class="product-info-tab-title">Descrição</div>
                        <p>${info.description || 'Informação não disponível'}</p>
                    </div>
                    ${info.additionalInfo ? `
                    <div class="product-info-tab">
                        <div class="product-info-tab-title">Características</div>
                        <p>${info.additionalInfo}</p>
                    </div>
                    ` : ''}
                `;
            });
        }

        // Buscar informações adicionais do produto
        async function fetchProductInfo(sku, name) {
            try {
                // Simular busca de informações adicionais
                // Em um ambiente real, esta função faria uma requisição para uma API
                
                // Aguardar 1,5 segundos para simular a busca
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // Determinar um texto de descrição com base no nome ou categoria
                let description = "Este produto faz parte da linha de confeitaria profissional, ideal para uso em padarias, confeitarias e estabelecimentos gastronômicos.";
                
                if (name.toLowerCase().includes("chocolate")) {
                    description = "Chocolate de alta qualidade para uso em confeitaria profissional. Proporciona sabor intenso e derretimento perfeito em suas receitas.";
                } else if (name.toLowerCase().includes("granulado")) {
                    description = "Granulado de qualidade premium, ideal para decoração de bolos, cupcakes e outras sobremesas. Mantém a crocância e cor mesmo após aplicação.";
                } else if (name.toLowerCase().includes("baunilha")) {
                    description = "Essência de baunilha de alta concentração, proporciona aroma e sabor intensos em suas receitas. Rendimento superior.";
                }
                
                let additionalInfo = "• Produto para uso profissional\n• Armazenar em local seco e arejado\n• Consulte a validade na embalagem";
                
                if (name.toLowerCase().includes("kg")) {
                    additionalInfo += "\n• Embalagem profissional econômica";
                }
                
                return {
                    description,
                    additionalInfo
                };
            } catch (error) {
                console.error("Erro ao buscar informações do produto:", error);
                return null;
            }
        }

        // Funções para controle de carrinho
        function incrementQuantity(sku) {
            const inputElement = document.getElementById(`qty-${sku}`);
            let value = parseInt(inputElement.value || 0);
            inputElement.value = value + 1;
            
            // Se o produto já estiver no carrinho, atualizar a quantidade
            updateCartItemQuantity(sku, value + 1);
        }

        function decrementQuantity(sku) {
            const inputElement = document.getElementById(`qty-${sku}`);
            let value = parseInt(inputElement.value || 0);
            if (value > 0) {
                inputElement.value = value - 1;
                
                // Atualizar quantidade no carrinho
                updateCartItemQuantity(sku, value - 1);
                
                // Se a quantidade for zero, remover do carrinho
                if (value - 1 === 0) {
                    removeFromCart(sku);
                }
            }
        }

        function toggleCart(sku, name, category) {
            const inCart = cart.some(item => item.sku === sku);
            
            if (inCart) {
                removeFromCart(sku);
            } else {
                // Obter a quantidade atual
                const quantityInput = document.getElementById(`qty-${sku}`);
                const quantity = parseInt(quantityInput.value || 1);
                
                // Se a quantidade for zero, definir como 1
                if (quantity === 0) {
                    quantityInput.value = 1;
                    addToCart(sku, name, category, 1);
                } else {
                    addToCart(sku, name, category, quantity);
                }
            }
        }

        function addToCart(sku, name, category, quantity = 1) {
            // Verificar se o produto já está no carrinho
            const existingItemIndex = cart.findIndex(item => item.sku === sku);
            
            if (existingItemIndex >= 0) {
                // Atualizar a quantidade se já existir
                cart[existingItemIndex].quantity = quantity;
            } else {
                // Adicionar novo item ao carrinho
                cart.push({
                    sku,
                    name,
                    category,
                    quantity
                });
            }
            
            // Atualizar o botão do produto
            updateCartButton(sku, true);
            
            // Atualizar o contador do carrinho
            updateCartCount();
            
            // Salvar o carrinho no localStorage
            saveCart();
        }

        function removeFromCart(sku) {
            // Filtrar o carrinho para remover o item
            cart = cart.filter(item => item.sku !== sku);
            
            // Atualizar o botão do produto
            updateCartButton(sku, false);
            
            // Zerar o input de quantidade
            const quantityInput = document.getElementById(`qty-${sku}`);
            if (quantityInput) {
                quantityInput.value = 0;
            }
            
            // Atualizar o contador do carrinho
            updateCartCount();
            
            // Salvar o carrinho no localStorage
            saveCart();
            
            // Atualizar a exibição do carrinho se estiver aberto
            if (document.getElementById('cartModal').style.display === 'flex') {
                renderCartItems();
            }
        }

        function updateCartItemQuantity(sku, quantity) {
            // Encontrar o item no carrinho
            const itemIndex = cart.findIndex(item => item.sku === sku);
            
            if (quantity <= 0) {
                // Se a quantidade for zero ou negativa, remover do carrinho
                if (itemIndex >= 0) {
                    removeFromCart(sku);
                }
            } else {
                if (itemIndex >= 0) {
                    // Atualizar a quantidade
                    cart[itemIndex].quantity = quantity;
                    
                    // Salvar o carrinho
                    saveCart();
                    
                    // Atualizar a exibição do carrinho se estiver aberto
                    if (document.getElementById('cartModal').style.display === 'flex') {
                        renderCartItems();
                    }
                } else {
                    // Se o item não estiver no carrinho mas tiver quantidade > 0,
                    // encontrar o produto na lista e adicionar ao carrinho
                    const product = allProducts.find(p => p.sku === sku);
                    if (product) {
                        addToCart(sku, product.marca, product.categoria, quantity);
                    }
                }
            }
        }

        function updateCartButton(sku, inCart) {
            const cartBtn = document.getElementById(`cart-btn-${sku}`);
            
            if (cartBtn) {
                if (inCart) {
                    cartBtn.classList.add('in-cart');
                    cartBtn.innerHTML = '<i class="fas fa-check"></i>';
                } else {
                    cartBtn.classList.remove('in-cart');
                    cartBtn.innerHTML = '<i class="fas fa-cart-plus"></i>';
                }
            }
        }

        function updateCartCount() {
            // Calcular a quantidade total de itens no carrinho
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            
            // Atualizar o contador no indicador do carrinho
            document.querySelector('.cart-count').textContent = totalItems;
        }

        function saveCart() {
            localStorage.setItem('cart', JSON.stringify(cart));
        }

        function clearCart() {
            // Limpar array do carrinho
            cart = [];
            
            // Atualizar exibição
            renderCartItems();
            
            // Atualizar contador
            updateCartCount();
            
            // Salvar carrinho vazio
            saveCart();
            
            // Redefinir todos os botões e quantidades
            document.querySelectorAll('.add-to-cart').forEach(btn => {
                const sku = btn.id.replace('cart-btn-', '');
                updateCartButton(sku, false);
                
                const quantityInput = document.getElementById(`qty-${sku}`);
                if (quantityInput) {
                    quantityInput.value = 0;
                }
            });
        }

        function openCartModal() {
            renderCartItems();
            openModal('cartModal');
        }

        function renderCartItems() {
            const cartItemsContainer = document.getElementById('cart-items');
            
            if (cart.length === 0) {
                cartItemsContainer.innerHTML = '<div class="empty-cart-message">Seu carrinho está vazio</div>';
                return;
            }
            
            let html = '';
            
            cart.forEach(item => {
                html += `
                    <div class="cart-item" data-sku="${item.sku}">
                        <div class="cart-item-info">
                            <div class="cart-item-name">${item.name}</div>
                            <div class="cart-item-sku">Código: ${item.sku}</div>
                        </div>
                        <div class="cart-item-qty">
                            <button class="qty-btn" onclick="decrementCartItem('${item.sku}')">-</button>
                            <input type="number" class="qty-input" value="${item.quantity}" min="1" max="999" readonly>
                            <button class="qty-btn" onclick="incrementCartItem('${item.sku}')">+</button>
                            <button class="qty-btn" onclick="removeFromCart('${item.sku}')" style="margin-left:5px">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            cartItemsContainer.innerHTML = html;
        }

        function incrementCartItem(sku) {
            // Encontrar o item no carrinho
            const item = cart.find(i => i.sku === sku);
            
            if (item) {
                item.quantity += 1;
                
                // Atualizar o input na lista de produtos
                const quantityInput = document.getElementById(`qty-${sku}`);
                if (quantityInput) {
                    quantityInput.value = item.quantity;
                }
                
                // Salvar e renderizar
                saveCart();
                renderCartItems();
            }
        }

        function decrementCartItem(sku) {
            // Encontrar o item no carrinho
            const item = cart.find(i => i.sku === sku);
            
            if (item && item.quantity > 1) {
                item.quantity -= 1;
                
                // Atualizar o input na lista de produtos
                const quantityInput = document.getElementById(`qty-${sku}`);
                if (quantityInput) {
                    quantityInput.value = item.quantity;
                }
                
                // Salvar e renderizar
                saveCart();
                renderCartItems();
            } else if (item && item.quantity <= 1) {
                // Se a quantidade for 1, remover do carrinho
                removeFromCart(sku);
            }
        }

        function sendToWhatsApp() {
            if (cart.length === 0) {
                alert("Seu carrinho está vazio.");
                return;
            }
            
            // Formatação do texto para o WhatsApp
            let message = "Olá! Gostaria de fazer um pedido:\n\n";
            
            cart.forEach(item => {
                message += `cod ${item.sku} ${item.quantity}und ${item.name}\n`;
                message += "-------------\n";
            });
            
            // Codificar a mensagem para URL
            const encodedMessage = encodeURIComponent(message);
            
            // Abrir o WhatsApp com a mensagem preenchida
            window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
        }

        // Funções para controle de modal
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = "flex";
            
            // Animar a abertura do modal
            setTimeout(() => {
                modal.classList.add('active');
            }, 10);
            
            // Impedir o scroll da página
            document.body.style.overflow = 'hidden';
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.remove('active');
            
            // Após a animação de fechamento
            setTimeout(() => {
                modal.style.display = "none";
            }, 300);
            
            // Restaurar o scroll da página
            document.body.style.overflow = 'auto';
        }

        // Configuração do scroll infinito
        function setupInfiniteScroll() {
            // Usar Intersection Observer para detectar quando o usuário chega ao final da página
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting && !isLoading) {
                        loadMoreProducts();
                    }
                });
            }, { threshold: 0.1 });
            
            const loader = document.createElement('div');
            loader.id = 'infinite-scroll-trigger';
            loader.style.height = '20px';
            document.getElementById('product-list').after(loader);
            
            observer.observe(loader);
        }

        function addInfiniteScrollLoader() {
            // Verificar se há mais produtos para carregar
            if (productData.length > visibleProducts) {
                const loader = document.createElement('div');
                loader.className = 'loader';
                loader.id = 'products-loader';
                loader.innerHTML = `
                    <div class="loader-spinner"></div>
                    <p>Carregando mais produtos...</p>
                `;
                document.getElementById('product-list').appendChild(loader);
                loader.style.display = 'block';
            }
        }

        function loadMoreProducts() {
            if (isLoading || productData.length <= visibleProducts) return;
            
            isLoading = true;
            
            // Simular carregamento
            setTimeout(() => {
                visibleProducts += incrementAmount;
                
                // Reexibir produtos com os mesmos filtros
                displayProducts(
                    document.getElementById("search").value,
                    document.getElementById("category").value,
                    document.getElementById("sort").value,
                    document.getElementById("package-size").value
                );
                
                isLoading = false;
            }, 500);
        }

        // Controle do botão "Voltar ao Topo"
        window.addEventListener('scroll', function() {
            const backToTopButton = document.getElementById('backToTop');
            if (window.scrollY > 300) {
                backToTopButton.classList.add('visible');
            } else {
                backToTopButton.classList.remove('visible');
            }
        });

        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // Configurar eventos de filtros
        document.getElementById("search").addEventListener("input", (e) => {
            visibleProducts = 20; // Resetar ao filtrar
            displayProducts(
                e.target.value,
                document.getElementById("category").value,
                document.getElementById("sort").value,
                document.getElementById("package-size").value
            );
        });

        document.getElementById("category").addEventListener("change", (e) => {
            visibleProducts = 20; // Resetar ao filtrar
            displayProducts(
                document.getElementById("search").value,
                e.target.value,
                document.getElementById("sort").value,
                document.getElementById("package-size").value
            );
        });

        document.getElementById("sort").addEventListener("change", (e) => {
            visibleProducts = 20; // Resetar ao filtrar
            displayProducts(
                document.getElementById("search").value,
                document.getElementById("category").value,
                e.target.value,
                document.getElementById("package-size").value
            );
        });

        document.getElementById("package-size").addEventListener("change", (e) => {
            visibleProducts = 20; // Resetar ao filtrar
            displayProducts(
                document.getElementById("search").value,
                document.getElementById("category").value,
                document.getElementById("sort").value,
                e.target.value
            );
        });

        // Fechar os modais ao clicar fora do conteúdo
        document.querySelectorAll(".modal").forEach(modal => {
            modal.addEventListener("click", function(e) {
                if (e.target === this) {
                    closeModal(this.id);
                }
            });
        });

        // Fechar modais com a tecla ESC
        document.addEventListener("keydown", function(e) {
            if (e.key === "Escape") {
                document.querySelectorAll(".modal").forEach(modal => {
                    if (modal.style.display === "flex") {
                        closeModal(modal.id);
                    }
                });
            }
        });
    </script>
</body>
</html>
